__NUXT_JSONP__("/blog/s6-overlay-quickstart", (function(a,b,c,d,e,f,g,h,i,j){return {data:[{blog:{id:6,status:"published",sort:a,date_created:"2023-11-08T14:32:00.000Z",date_updated:"2023-11-08T12:57:35.774Z",slug:"s6-overlay-quickstart",title:b,description:"\u003Cp data-pm-slice=\"1 1 []\"\u003ES6-overlay is designed for docker containers. But, It is hard to understand from the \u003Cu\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fjust-containers\u002Fs6-overlay\u002Fblob\u002Fmaster\u002FREADME.md\" target=\"_self\"\u003EReadme\u003C\u002Fa\u003E\u003C\u002Fu\u003E of the \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fjust-containers\u002Fs6-overlay\" target=\"_self\"\u003Erepository\u003C\u002Fa\u003E. So, I thought that let&rsquo;s write a quick start guide for it.\u003C\u002Fp\u003E\n\u003Ch2\u003E&nbsp;\u003C\u002Fh2\u003E",seo_title:b,seo_description:b,content:"\u003Cp data-pm-slice=\"1 1 []\"\u003ES6-overlay is designed for docker containers. But, It is hard to understand from \u003Cu\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fjust-containers\u002Fs6-overlay\u002Fblob\u002Fmaster\u002FREADME.md\" rel=\"noopener noreferrer nofollow\"\u003EReadme\u003C\u002Fa\u003E\u003C\u002Fu\u003E of \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fjust-containers\u002Fs6-overlay\" rel=\"noopener noreferrer nofollow\"\u003Erepository\u003C\u002Fa\u003E. So, I thought that let’s write quick start guide for it.\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cspan class=\"heading-content\"\u003EWhat is s6-overlay?\u003C\u002Fspan\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003ES6-overlay is process manager which is designed for containerization from ground up. It is a perfect tool to manage lifetime(init to shutdown) of container. I can say that it is a better alternative of supervisord.&nbsp;Why I am saying that? Let’s see features of s6-overlay.\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cspan class=\"heading-content\"\u003EFeatures of s6-overlay\u003C\u002Fspan\u003E\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cp\u003EYou can run one-time and long running processes using it.\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003EYou can define dependencies of processes.\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003EYou can set sequence of process\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003EIt supports templating for scripts with environment variables.\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003EEasy to install in any docker image (1 or 2 tarballs)\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003EIt supports log rotating.\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003EGraceful shutdown. Also, you can run your own script or process before the shutdown\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003EMulti-arch container images are supported.\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003E\u003Cspan class=\"heading-content\"\u003EDirectory Structure\u003C\u002Fspan\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003ES6-overlay directory structure makes it different than other process managers. Due to directory structure, instead of single file, it gives us flexibility to inject more processes from app level image without overriding base image’s processes. \u003Ccode class=\"inline\" spellcheck=\"false\"\u003E\u002Fetc\u002Fs6-overlay\u002Fs6-rc\u003C\u002Fcode\u003E will be base directory. You need to create directory for each process that you want to run. In each directory you need to create few files. Let’s understand each file.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode class=\"inline\" spellcheck=\"false\"\u003Etype\u003C\u002Fcode\u003E - In that file you need to write just \u003Ccode class=\"inline\" spellcheck=\"false\"\u003Eoneshot\u003C\u002Fcode\u003E or \u003Ccode class=\"inline\" spellcheck=\"false\"\u003Elongrun\u003C\u002Fcode\u003E. If you want to run any script as initializations tasks before your main processes then \u003Ccode class=\"inline\" spellcheck=\"false\"\u003Eoneshot\u003C\u002Fcode\u003E is useful. If you want to run some daemon processes which should be supervise by s6 then you can use \u003Ccode class=\"inline\" spellcheck=\"false\"\u003Elongrun\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode class=\"inline\" spellcheck=\"false\"\u003Eup\u003C\u002Fcode\u003E - In this file you need to pass filepath of your script. It will be just path of your script. If you will not pass that then s6 will consider \u003Ccode class=\"inline\" spellcheck=\"false\"\u003Erun\u003C\u002Fcode\u003E as your script.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode class=\"inline\" spellcheck=\"false\"\u003Erun\u003C\u002Fcode\u003E - Here you can write your script\u002Fprocess. If you want to use environment variable then you can also use \u003Ca href=\"https:\u002F\u002Fskarnet.org\u002Fsoftware\u002Fexecline\u002Fexeclineb.html\" rel=\"noopener noreferrer nofollow\"\u003Eexeclineb\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode class=\"inline\" spellcheck=\"false\"\u003Edependencies.d\u003C\u002Fcode\u003E - This is directory. If your process is dependent on another process then you can create an empty file with name of that process in this directory. You can create multiple files, if your process is dependent on multiple processes.\u003C\u002Fp\u003E\n\u003Cp\u003EFinally, it will look like below\u003C\u002Fp\u003E\n\u003Cdiv class=\"code-block with-line-numbers\" data-language=\"javascript\"\u003E\n\u003Cpre\u003E\u003Ccode spellcheck=\"false\"\u003Es6-overlay\n└── s6-rc.d\n    ├── init-nginx\n    │&nbsp;&nbsp; ├── dependencies.d\n    │&nbsp;&nbsp; │&nbsp;&nbsp; └── base\n    │&nbsp;&nbsp; ├── run\n    │&nbsp;&nbsp; ├── type\n    │&nbsp;&nbsp; └── up\n    ├── init-php82-fpm\n    │&nbsp;&nbsp; ├── dependencies.d\n    │&nbsp;&nbsp; │&nbsp;&nbsp; └── init-nginx\n    │&nbsp;&nbsp; ├── run\n    │&nbsp;&nbsp; ├── type\n    │&nbsp;&nbsp; └── up\n    ├── init-usermod\n    │&nbsp;&nbsp; ├── dependencies.d\n    │&nbsp;&nbsp; │&nbsp;&nbsp; └── init-nginx\n    │&nbsp;&nbsp; ├── run\n    │&nbsp;&nbsp; ├── type\n    │&nbsp;&nbsp; └── up\n    ├── svc-nginx\n    │&nbsp;&nbsp; ├── dependencies.d\n    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── init-nginx\n    │&nbsp;&nbsp; │&nbsp;&nbsp; └── svc-php82-fpm\n    │&nbsp;&nbsp; ├── run\n    │&nbsp;&nbsp; └── type\n    ├── svc-php82-fpm\n    │&nbsp;&nbsp; ├── dependencies.d\n    │&nbsp;&nbsp; ├── run\n    │&nbsp;&nbsp; └── type\n    ├── svc-stdout\n    │&nbsp;&nbsp; ├── dependencies.d\n    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── svc-nginx\n    │&nbsp;&nbsp; │&nbsp;&nbsp; └── svc-php82-fpm\n    │&nbsp;&nbsp; ├── run\n    │&nbsp;&nbsp; └── type\n    └── user\n        └── contents.d\n            ├── init-nginx\n            ├── init-php82-fpm\n            ├── init-usermod\n            ├── svc-nginx\n            ├── svc-php82-fpm\n            └── svc-stdout\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fdiv\u003E\n\u003Ch3\u003E\u003Cspan class=\"heading-content\"\u003EInstalling S6\u003C\u002Fspan\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003ES6-overlay comes in few tar files. They gave \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fjust-containers\u002Fs6-overlay?tab=readme-ov-file#installation\" rel=\"noopener noreferrer nofollow\"\u003Edetailed descriptions\u003C\u002Fa\u003E of all tarfiles. If you want to use script with environment variable then you need to install symlinks tarfiles. If you are running daemons that cannot log to stderr to take advantage of the s6 logging infrastructure, but hardcode the use of the old \u003Ccode class=\"inline\" spellcheck=\"false\"\u003Esyslog()\u003C\u002Fcode\u003E mechanism, you can install \u003Ccode class=\"inline\" spellcheck=\"false\"\u003Esyslog-overlay-noarch\u003C\u002Fcode\u003E tar file. Here is sample code to install S6 in docker image. You can find full image \u003Ca href=\"https:\u002F\u002Fgithub.com\u002FImprowised\u002Fdocker-php-base\u002Ftree\u002Fs6-php82\" rel=\"noopener noreferrer nofollow\"\u003Ehere\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\u003Cdiv class=\"code-block with-line-numbers\" data-language=\"bash\"\u003E\n\u003Cpre\u003E\u003Ccode spellcheck=\"false\"\u003EFROM alpine:3.18\n\nARG S6_OVERLAY_VERSION=\"3.1.5.0\"\nARG S6_OVERLAY_ARCH=\"x86_64\"\n\n# add s6 overlay\nADD https:\u002F\u002Fgithub.com\u002Fjust-containers\u002Fs6-overlay\u002Freleases\u002Fdownload\u002Fv${S6_OVERLAY_VERSION}\u002Fs6-overlay-noarch.tar.xz \u002Ftmp\nRUN tar -C \u002F -Jxpf \u002Ftmp\u002Fs6-overlay-noarch.tar.xz\nADD https:\u002F\u002Fgithub.com\u002Fjust-containers\u002Fs6-overlay\u002Freleases\u002Fdownload\u002Fv${S6_OVERLAY_VERSION}\u002Fs6-overlay-${S6_OVERLAY_ARCH}.tar.xz \u002Ftmp\nRUN tar -C \u002F -Jxpf \u002Ftmp\u002Fs6-overlay-${S6_OVERLAY_ARCH}.tar.xz\n\n# add s6 optional symlinks\nADD https:\u002F\u002Fgithub.com\u002Fjust-containers\u002Fs6-overlay\u002Freleases\u002Fdownload\u002Fv${S6_OVERLAY_VERSION}\u002Fs6-overlay-symlinks-noarch.tar.xz \u002Ftmp\nRUN tar -C \u002F -Jxpf \u002Ftmp\u002Fs6-overlay-symlinks-noarch.tar.xz\nADD https:\u002F\u002Fgithub.com\u002Fjust-containers\u002Fs6-overlay\u002Freleases\u002Fdownload\u002Fv${S6_OVERLAY_VERSION}\u002Fs6-overlay-symlinks-arch.tar.xz \u002Ftmp\nRUN tar -C \u002F -Jxpf \u002Ftmp\u002Fs6-overlay-symlinks-arch.tar.xz\nADD https:\u002F\u002Fgithub.com\u002Fjust-containers\u002Fs6-overlay\u002Freleases\u002Fdownload\u002Fv${S6_OVERLAY_VERSION}\u002Fsyslogd-overlay-noarch.tar.xz \u002Ftmp\nRUN tar -C \u002F -Jxpf \u002Ftmp\u002Fsyslogd-overlay-noarch.tar.xz\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fdiv\u003E\n\u003Cp\u003EWhen you need to run PHP application on production you need to use PHP-FPM as PHP is single threaded so it can’t handle heavy traffic with minimal use of memory and CPU. So, s6-overlay is perfect for those kind of applications. So, In this example we will run PHP-FPM & nginx.\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cspan class=\"heading-content\"\u003EInstalling PHP & Nginx\u003C\u002Fspan\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003Eyou can install PHP and nginx using package manager. In our case we are using alpine base image so, we will use apk to install PHP & Nginx. It will look like below:\u003C\u002Fp\u003E\n\u003Cdiv class=\"code-block with-line-numbers\" data-language=\"bash\"\u003E\n\u003Cpre\u003E\u003Ccode spellcheck=\"false\"\u003E# Install OS Dependencies\nRUN set -ex \\\n  && apk add --no-cache --virtual .build-deps \\\n    autoconf automake build-base python3 gmp-dev \\\n    curl \\\n    tar \\\n  && apk add --no-cache --virtual .run-deps \\\n    nodejs npm \\\n    # PHP and extensions\n    php82 php82-bcmath php82-ctype php82-curl php82-dom php82-exif php82-fileinfo \\\n    php82-fpm php82-gd php82-gmp php82-iconv php82-intl php82-mbstring \\\n    php82-mysqlnd php82-mysqli php82-opcache php82-openssl php82-pcntl php82-pecl-apcu php82-pdo php82-pdo_mysql \\\n    php82-phar php82-posix php82-session php82-simplexml php82-sockets php82-sqlite3 php82-tidy \\\n    php82-tokenizer php82-xml php82-xmlreader php82-xmlwriter php82-zip php82-pecl-xdebug php82-pecl-redis php82-soap php82-sodium php82-pdo_sqlite php82-pdo_pgsql php82-pgsql \\\n    # Other dependencies\n    mariadb-client sudo shadow \\\n    # Miscellaneous packages\n    bash ca-certificates dialog git libjpeg libpng-dev openssh-client vim wget shadow \\\n    # Nginx\n    nginx \\\n    # Create directories\n  && mkdir -p \u002Fetc\u002Fnginx \\\n    && mkdir -p \u002Frun\u002Fnginx \\\n    && mkdir -p \u002Fetc\u002Fnginx\u002Fsites-available \\\n    && mkdir -p \u002Fetc\u002Fnginx\u002Fsites-enabled \\\n    && rm -Rf \u002Fvar\u002Fwww\u002F* \\\n    && rm -Rf \u002Fetc\u002Fnginx\u002Fnginx.conf \\\n  # Composer\n  && wget https:\u002F\u002Fcomposer.github.io\u002Finstaller.sig -O - -q | tr -d '\\n' \u003E installer.sig \\\n    && php82 -r \"copy('https:\u002F\u002Fgetcomposer.org\u002Finstaller', 'composer-setup.php');\" \\\n    && php82 -r \"if (hash_file('SHA384', 'composer-setup.php') === file_get_contents('installer.sig')) { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\" \\\n    && php82 composer-setup.php --install-dir=\u002Fusr\u002Fbin --filename=composer \\\n    && php82 -r \"unlink('composer-setup.php'); unlink('installer.sig');\" \\\n  # Cleanup\n  && apk del .build-deps\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fdiv\u003E\n\u003Cp\u003EHere we also installed Nodejs and npm as we are using this image for the Laravel app in which frontend files will be built using vite.\u003C\u002Fp\u003E\n\u003Cp\u003ENow we need PHP-FPM and Nginx config. That generally we kept in base image repo in following directory structure\u003C\u002Fp\u003E\n\u003Cdiv class=\"code-block with-line-numbers\" data-language=\"javascript\"\u003E\n\u003Cpre\u003E\u003Ccode spellcheck=\"false\"\u003E└── rootfs\n    └── etc\n        ├── nginx\n        │&nbsp;&nbsp; ├── nginx.conf\n        │&nbsp;&nbsp; ├── sites-available\n        │&nbsp;&nbsp; │&nbsp;&nbsp; └── default.conf\n        │&nbsp;&nbsp; └── sites-enabled\n        ├── php82\n        │&nbsp;&nbsp; ├── conf.d\n        │&nbsp;&nbsp; ├── php-fpm.conf\n        │&nbsp;&nbsp; ├── php-fpm.d\n        │&nbsp;&nbsp; │&nbsp;&nbsp; └── www.conf\n        │&nbsp;&nbsp; └── php.ini\n        ├── s6-overlay\n        │&nbsp;&nbsp; └── s6-rc.d\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fdiv\u003E\n\u003Cp\u003ESo we added that using below line in Dockerfile\u003C\u002Fp\u003E\n\u003Cdiv class=\"code-block with-line-numbers\" data-language=\"javascript\"\u003E\n\u003Cpre\u003E\u003Ccode spellcheck=\"false\"\u003EADD rootfs \u002F\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fdiv\u003E\n\u003Ch3\u003E\u003Cspan class=\"heading-content\"\u003ESetting Users & Permission in your image\u003C\u002Fspan\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003EBy default, docker runs containers with \u003Ccode class=\"inline\" spellcheck=\"false\"\u003Eroot\u003C\u002Fcode\u003E privileges. This is fine for local development as developer need to install new packages or edit configs. But, It is not good for production as anyone who have access of that container can add packages or change permissions. So, to run your process as a non-root user you need to specify that user\u002FUID. In this case we will run process as \u003Ccode class=\"inline\" spellcheck=\"false\"\u003Enginx\u003C\u002Fcode\u003E user. Using below script we will set UID & GID of nginx user and group. We included that script in s6-overlay, so it will run as \u003Ccode class=\"inline\" spellcheck=\"false\"\u003Eoneshot\u003C\u002Fcode\u003E before PHP-FPM and nginx start.\u003C\u002Fp\u003E\n\u003Cdiv class=\"code-block with-line-numbers\" data-language=\"javascript\"\u003E\n\u003Cpre\u003E\u003Ccode spellcheck=\"false\"\u003E#!\u002Fusr\u002Fbin\u002Fwith-contenv bash\n# shellcheck shell=bash\n\nUID=${UID:-911}\nGID=${GID:-911}\n\nusermod -u \"$UID\" nginx && groupmod -g \"$GID\" nginx\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fdiv\u003E\n\u003Cp\u003EIn that script, you can use environment variables that you passed to your container.\u003C\u002Fp\u003E\n\u003Cp\u003Ei.e \u003Ccode class=\"inline\" spellcheck=\"false\"\u003Edocker run --name s6-app -e UID -e GID -p 8888:80 -v .:\u002Fvar\u002Fwww\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cspan class=\"heading-content\"\u003EProcess Sequence\u003C\u002Fspan\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003EWhen you are running multiple processes, then you need to run those in some sequence too. It is very easy in s6 to set that sequence. Our nginx process is dependent on nginx init process so, we can set sequence like below\u003C\u002Fp\u003E\n\u003Cdiv class=\"code-block with-line-numbers\" data-language=\"javascript\"\u003E\n\u003Cpre\u003E\u003Ccode spellcheck=\"false\"\u003Ecd svc-nginx\nmkdir dependencies.d\ntouch init-nginx svc-php82-fpm\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fdiv\u003E\n\u003Cp\u003ENow, \u003Ccode class=\"inline\" spellcheck=\"false\"\u003Esvc-nginx\u003C\u002Fcode\u003E will start only after \u003Ccode class=\"inline\" spellcheck=\"false\"\u003Einit-nginx\u003C\u002Fcode\u003E will be completed(as it is oneshot) and \u003Ccode class=\"inline\" spellcheck=\"false\"\u003Esvc-php82-fpm\u003C\u002Fcode\u003E will be in a running state.\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cspan class=\"heading-content\"\u003EGraceful Shutdown\u003C\u002Fspan\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003EGraceful shutdown is important if you want proper state of data or response when container exit. S6-overlay supports \u003Ccode class=\"inline\" spellcheck=\"false\"\u003ES6_SERVICES_GRACETIME\u003C\u002Fcode\u003E & \u003Ccode class=\"inline\" spellcheck=\"false\"\u003ES6_KILL_GRACETIME\u003C\u002Fcode\u003E variables to set gracetime. Also, s6-overlay supports to change exit code that container will return on exit. You can write \u003Ccode class=\"inline\" spellcheck=\"false\"\u003Efinish\u003C\u002Fcode\u003E file in your process directory. Suppose, I am running a process which is not important then I can finish script to return 0 status like below. Finish script is optional, you only need it when you want to modify exitcode or want to run some cleanup process.\u003C\u002Fp\u003E\n\u003Cdiv class=\"code-block with-line-numbers\" data-language=\"bash\"\u003E\n\u003Cpre\u003E\u003Ccode spellcheck=\"false\"\u003E#!\u002Fbin\u002Fsh\n\necho \"0\" \u003E \u002Frun\u002Fs6-linux-init-container-results\u002Fexitcode\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fdiv\u003E\n\u003Ch3\u003E\u003Cspan class=\"heading-content\"\u003EExtending Image\u003C\u002Fspan\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003EAs s6-overlay follows directory structure instead of single file. It is very easy to extend this image from another image. Now, we can build many images from this image and add as many other processes as we want. Just by writing something like below without overwriting anything existing in s6.\u003C\u002Fp\u003E\n\u003Cdiv class=\"code-block with-line-numbers\" data-language=\"javascript\"\u003E\n\u003Cpre\u003E\u003Ccode spellcheck=\"false\"\u003ECOPY svc-crond \u002Fetc\u002Fs6-overlay\u002Fs6-rc.d\u002Fsvc-crond\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fdiv\u003E\n\u003Ch3\u003E\u003Cspan class=\"heading-content\"\u003ESummary\u003C\u002Fspan\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003EWe used supervisor in production for many years. It is not solving all problems which s6-overlay is solving. It is modern alternative to supervisor. It is perfect for images in which we need to run multiple processes.\u003C\u002Fp\u003E",tags:a,time_to_read:"5 minutes",user_created:{id:"c7ce7ff3-6577-4e14-9e95-71b2dd8d67c4",first_name:"Munir",last_name:"Khakhi",email:"munir@improwised.com",password:c,location:a,title:a,description:a,tags:a,avatar:"9f47a2fb-c13e-4cf3-99fa-7117ef11e769",language:a,theme:d,tfa_secret:a,status:e,role:f,token:a,last_access:"2023-11-08T11:54:20.706Z",last_page:"\u002Fcontent\u002Fpe_blog\u002F6",provider:g,external_identifier:a,auth_data:a,email_notifications:h},user_updated:{id:i,first_name:"Mansi",last_name:"Pancholi",email:"mansi@improwised.com",password:c,location:a,title:a,description:a,tags:a,avatar:"86701c80-2aba-48e2-90c1-d47cda4fdcd3",language:"en-US",theme:d,tfa_secret:a,status:e,role:f,token:a,last_access:"2023-11-08T12:54:29.921Z",last_page:"\u002Fcontent\u002Fpe_blog",provider:g,external_identifier:a,auth_data:a,email_notifications:h},image:{id:"70ad351f-5690-4055-b18b-62de85916a06",storage:"AMZ",filename_disk:"70ad351f-5690-4055-b18b-62de85916a06.jpg",filename_download:"S6 Image.jpg",title:"S6 Image",type:"image\u002Fjpeg",folder:"33b4de25-d0f2-4999-ba32-6883f9932c34",uploaded_by:i,uploaded_on:"2023-11-08T12:56:50.977Z",modified_by:a,modified_on:"2023-11-08T12:56:51.810Z",charset:a,filesize:"807681",width:j,height:j,duration:a,embed:a,description:a,location:a,tags:a,metadata:{}}},_img:{"/_ipx/h_55,f_png/img/plateform-engineers.png":"\u002F_nuxt\u002Fimage\u002F8686bc.png","/_ipx/f_png/https://data.improwised.com/assets/9f47a2fb-c13e-4cf3-99fa-7117ef11e769":"\u002F_nuxt\u002Fimage\u002F69505e.png","/_ipx/h_400,f_png/https://data.improwised.com/assets/70ad351f-5690-4055-b18b-62de85916a06":"\u002F_nuxt\u002Fimage\u002Fbda3f2.png","/_ipx/f_png,h_400/https://data.improwised.com/assets/70ad351f-5690-4055-b18b-62de85916a06":"\u002F_nuxt\u002Fimage\u002F939049.png"}}],fetch:{},mutations:[]}}(null,"S6-Overlay quickstart","**********","auto","active","5ef170ac-f2e9-4b93-a9ea-5c54fcf0fa40","default",true,"a8418846-5723-4563-86df-99615438090f",1500)));